<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.alfresco.reporting">
<!--  quote_ident(colname) -->
<!-- quote_literal(keyvalue) -->

<select id="show-tables"   resultType="String">
	select tablename from pg_tables where schemaname='public';
</select>

<!-- column_name is important. data_type is not. Actually I think it could be anything -->
<!-- but name it COLUMN_NAME and COLUMN_TYPE!! -->
<select id="describe-table"  parameterType="SelectFromWhere"  resultType="HashMap">
	select distinct column_name, data_type as COLUMN_TYPE 
	from INFORMATION_SCHEMA.COLUMNS 
	where UPPER(table_name) = UPPER(#{from});
</select>

<insert id="push-preliminary-functions">
select 1;
</insert>

<select id="table-exists" parameterType="SelectFromWhere" resultType="int">
	SELECT count(*) 
		FROM   pg_catalog.pg_tables 
		WHERE  schemaname = 'public'
		AND    UPPER(tablename)  = UPPER(#{from})
</select>

<insert id="reporting-create-empty-table" parameterType="SelectFromWhere"  flushCache="true"> 
	CREATE TABLE ${from} (
		id bigserial PRIMARY KEY,
		sys_node_uuid VARCHAR(100),
		isLatest SMALLINT DEFAULT 1,
		validFrom TIMESTAMP, 
		validUntil TIMESTAMP);
</insert>

<!--  TODO -->
<insert id="reporting-create-index" parameterType="SelectFromWhere" flushCache="true" >
	
	CREATE INDEX ${where}
  		ON ${from} (${select})

</insert>


<insert id="lastrun-create-empty-table"  flushCache="true"> 

		CREATE TABLE lastsuccessfulrun(
			id BIGSERIAL PRIMARY KEY,
			isLatest SMALLINT DEFAULT 1,
			tablename VARCHAR(100),
			lastrun VARCHAR(50),
			status VARCHAR(10));
		 
</insert >

<select id="lastrun-table-is-running"  resultType="int">

	SELECT count(*) 
		FROM lastsuccessfulrun
		WHERE status = 'Running'

</select>

<insert id="lastrun-insertTablename" parameterType="LastRunDefinition"  flushCache="true">
	INSERT INTO lastsuccessfulrun
		(tablename) VALUES (#{tablename})
</insert>


<select id="lastrun-getLastSuccessfulRunDateForTable" parameterType="LastRunDefinition" resultType="String">
	SELECT lastrun 
		FROM lastsuccessfulrun
		WHERE tablename LIKE #{tablename}
</select>

<select id="lastrun-getLastSuccessfulRunStatusForTable" parameterType="LastRunDefinition" resultType="String">
	SELECT status 
		FROM lastsuccessfulrun
		WHERE tablename LIKE #{tablename}
</select>



<update id="lastrun-updateLastSuccessfulRunDateForTable" parameterType="LastRunDefinition"  flushCache="true">
	UPDATE lastsuccessfulrun
		SET lastrun = #{lastrun},
		status = 'Done'
		WHERE tablename LIKE #{tablename}
</update>

<update id="lastrun-updateLastSuccessfulBatchDateForTable" parameterType="LastRunDefinition"  flushCache="true">
	UPDATE lastsuccessfulrun
		SET lastrun = #{lastrun}
		WHERE tablename LIKE #{tablename}
</update>

<update id="lastrun-updateLastSuccessfulRunStatusForTable" parameterType="LastRunDefinition"  flushCache="true">
	UPDATE lastsuccessfulrun
		SET status = #{status}
		WHERE tablename LIKE #{tablename}
</update>

<update id="lastrun-cleanTimestampTablename"  parameterType="LastRunDefinition"  flushCache="true">
	UPDATE lastsuccessfulrun
		SET LASTRUN = ''
		WHERE tablename LIKE #{tablename}
</update>

<select id="lastrun-selectCountForTablename" resultType="int">
	SELECT count(*) from lastsuccessfulrun
		WHERE (tablename LIKE #{tablename}
</select>

<insert id="lastrun-insertLastSuccessfulRunForTable" parameterType="LastRunDefinition" flushCache="true">
	INSERT INTO lastsuccessfulrun
		(status, tablename)
		VALUES ('Done', #{tablename})
</insert>

<update id="lastrun-updateLastSuccessfulRunStatusesDoneForTable" flushCache="true">
	UPDATE lastsuccessfulrun
		SET status = 'Done'
		WHERE status NOT LIKE 'Done';
</update>

<!-- End Last run. Start Reporting -->

<update id="reporting-extendTableDefinition" parameterType="ReportingColumnDefinition">
	ALTER TABLE ${tablename} ADD ${columnname} ${columntype};
	COMMIT;
</update>

<select id="reporting-row-exists" parameterType="SelectFromWhere" resultType="int">
	SELECT count(*) 
		FROM ${from} 
		WHERE ( sys_node_uuid = #{where} )
</select>

<select id="reporting-row-equals-modified-date" parameterType="SelectFromWhere" resultType="int">
	SELECT count(*) FROM ${from}
	WHERE sys_node_uuid = #{where} 
	  AND cm_modified = #{andwhere}::TIMESTAMP;
</select>

<select id="reporting-row-versioned-equals-modified-date" parameterType="SelectFromWhere" resultType="int">
	SELECT count(*) FROM ${from}
	WHERE sys_node_uuid = #{where} 
	  AND cm_modified = #{andwhere}::TIMESTAMP
	  AND cm_versionLabel = #{andandwhere};
</select>


<select id="reporting-select-from-where" parameterType="SelectFromWhere" resultType="String">
	SELECT ${select} 
		FROM ${from}
		WHERE ${where};
</select>

<insert id="reporting-insert-into-table" parameterType="InsertInto">
	INSERT INTO ${tablename} 
		(${keys}) 
		VALUES (${values});
</insert>


<update id="reporting-update-into-table" parameterType="UpdateWhere">
	UPDATE ${tablename} SET ${updateClause} 
		WHERE ${whereClause};
</update>


<update id="reporting-update-versioned-into-table-reset-islatest" parameterType="UpdateWhere">
	UPDATE ${tablename} SET ${updateClause}, isLatest=0 
		WHERE ${whereClause} AND (isLatest=1);
</update>

<select id="reporting-select-islatest-per-table" parameterType="SelectFromWhere" resultType="HashMap">
	SELECT isLatest, count(*) 
		FROM ${from}
		GROUP BY isLatest 
		ORDER BY isLatest;
</select>

<select id="reporting-select-store-protocol-per-table" parameterType="SelectFromWhere" resultType="HashMap">
	SELECT sys_store_protocol, count(*) 
		FROM ${from}
		GROUP BY sys_store_protocol 
		ORDER BY sys_store_protocol;
</select>

<select id="lastrun-select-status-for-table" parameterType="SelectFromWhere" resultType="String">
	SELECT status
		FROM lastsuccessfulrun
		WHERE tablename like #{from}
</select>

<select id="show-table-count"  parameterType="SelectFromWhere"  resultType="int">
	SELECT count(*) FROM ${from};
</select>


<delete id="dropTable" parameterType="SelectFromWhere"  flushCache="true">
  DROP TABLE IF EXISTS ${from};
</delete>

</mapper>