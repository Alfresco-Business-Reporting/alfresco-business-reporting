<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.alfresco.reporting">

<select id="show-tables" resultType="String">
	SELECT TABLE_NAME 
		FROM USER_TABLES 
		ORDER BY TABLE_NAME
</select>

<!-- column_name is important. data_type is not. Actually I think it could be anything -->
<!-- but name it COLUMN_NAME and COLUMN_TYPE!! -->
<select id="describe-table"  parameterType="SelectFromWhere"  resultType="HashMap">
	select DISTINCT COLUMN_NAME as COLUMN_NAME, DATA_TYPE as COLUMN_TYPE 
	from USER_TAB_COLUMNS
	where UPPER(TABLE_NAME) = UPPER(#{from})
</select>

<insert id="push-preliminary-functions">
	SELECT 1
</insert>

<select id="table-exists"  parameterType="SelectFromWhere"  resultType="int">
	SELECT count(*) FROM USER_TABLES
		WHERE UPPER(TABLE_NAME) LIKE UPPER(#{from})
</select>

<insert id="reporting-create-empty-table" parameterType="SelectFromWhere"  flushCache="true"> 

	CREATE TABLE ${from} (
<!--          id RAW(16) DEFAULT sys_guid() primary key, -->
          sys_node_uuid VARCHAR(100),
          isLatest NUMBER(1) DEFAULT 1,
          validFrom DATE, 
          validUntil DATE)

</insert>

<insert id="reporting-create-index" parameterType="SelectFromWhere" flushCache="true" >
	
	CREATE INDEX ${where}
  		ON ${from} (${select})

</insert>


<insert id="lastrun-create-empty-table"  flushCache="true"> 

	CREATE TABLE LASTSUCCESSFULRUN ( 
<!--          id RAW(16) DEFAULT sys_guid() primary key, -->
      isLatest NUMBER(1) DEFAULT 1,
	  table_name VARCHAR(100),
	  lastrun VARCHAR(50),
	  status VARCHAR(10))

</insert >

<select id="lastrun-table-is-running"  resultType="int">
	SELECT count(*) 
		FROM lastsuccessfulrun
		WHERE status = 'Running'
</select>

<insert id="lastrun-insertTablename" parameterType="LastRunDefinition"  flushCache="true">
	
	<!--selectKey keyProperty="id" resultType="int" order="BEFORE">
	     SELECT lastsuccessfulrun_seq.NEXTVAL
	</selectKey-->
	INSERT INTO lastsuccessfulrun	
		(table_name) VALUES (#{tablename})
</insert>


<select id="lastrun-getLastSuccessfulRunDateForTable" parameterType="LastRunDefinition" resultType="String">
	SELECT LASTRUN 
		FROM lastsuccessfulrun
		WHERE table_name LIKE #{tablename}
</select>

<select id="lastrun-getLastSuccessfulRunStatusForTable" parameterType="LastRunDefinition" resultType="String">
	SELECT STATUS 
		FROM lastsuccessfulrun
		WHERE table_name LIKE #{tablename}
</select>



<update id="lastrun-updateLastSuccessfulRunDateForTable" parameterType="LastRunDefinition"  flushCache="true">
	UPDATE lastsuccessfulrun
		SET lastrun = #{lastrun},
		status = 'Done'
		WHERE table_name LIKE #{tablename}
</update>

<update id="lastrun-updateLastSuccessfulBatchDateForTable" parameterType="LastRunDefinition"  flushCache="true">
	UPDATE lastsuccessfulrun
		SET lastrun = #{lastrun}
		WHERE table_name LIKE #{tablename}
</update>

<update id="lastrun-updateLastSuccessfulRunStatusForTable" parameterType="LastRunDefinition"  flushCache="true">
	UPDATE lastsuccessfulrun
		SET STATUS = #{status}
		WHERE table_name LIKE #{tablename}
</update>


<update id="lastrun-cleanTimestampTablename"  parameterType="LastRunDefinition"  flushCache="true">
	UPDATE lastsuccessfulrun
		SET lastrun = ''
		WHERE table_name LIKE #{tablename}
</update>


<select id="lastrun-selectCountForTablename" resultType="int">
	SELECT count(*) from lastsuccessfulrun
		WHERE table_name LIKE #{tablename}
</select>

<insert id="lastrun-insertLastSuccessfulRunForTable" parameterType="LastRunDefinition" flushCache="true">
	<!--selectKey keyProperty="id" resultType="int" order="BEFORE">
	     SELECT lastsuccessfulrun_seq.NEXTVAL
	 </selectKey -->
	INSERT INTO lastsuccessfulrun
	  (status, table_name)
	  VALUES ('Done', #{tablename})
</insert>

<update id="lastrun-updateLastSuccessfulRunStatusesDoneForTable" flushCache="true">
	UPDATE lastsuccessfulrun
		SET status = 'Done'
		WHERE UPPER(status) NOT LIKE 'DONE'
</update>

<!-- End Last run. Start Reporting -->

<update id="reporting-extendTableDefinition" parameterType="ReportingColumnDefinition">
	ALTER TABLE ${tablename} ADD ${columnname} ${columntype}
	
</update>

<select id="reporting-row-exists" parameterType="SelectFromWhere" resultType="int">
	SELECT count(*) 
		FROM ${from} 
		WHERE sys_node_uuid = #{where} 
</select>

<select id="reporting-row-equals-modified-date" parameterType="SelectFromWhere" resultType="int">
	SELECT count(*) FROM ${from}
	WHERE sys_node_uuid = #{where} 
	  AND cm_modified = TO_DATE(#{andwhere}, 'yyyy-MM-dd HH24:MI:SS')
</select>

<select id="reporting-row-versioned-equals-modified-date" parameterType="SelectFromWhere" resultType="int">
	SELECT count(*) FROM ${from}
	WHERE sys_node_uuid = #{where} 
	  AND cm_modified = TO_DATE(#{andwhere}, 'yyyy-MM-dd HH24:MI:SS')
	  AND cm_versionLabel like #{andandwhere}
</select>


<select id="reporting-select-from-where" parameterType="SelectFromWhere" resultType="String">
	SELECT ${select} 
		FROM ${from}
		WHERE ${where}
</select>

<insert id="reporting-insert-into-table" parameterType="InsertInto">
	INSERT INTO ${tablename} 
		(${keys}) 
		VALUES (${values})
</insert>


<update id="reporting-update-into-table" parameterType="UpdateWhere">
	UPDATE ${tablename} SET ${updateClause} 
		WHERE ${whereClause}
</update>


<update id="reporting-update-versioned-into-table-reset-islatest" parameterType="UpdateWhere">
	UPDATE ${tablename} SET ${updateClause}, isLatest=0 
		WHERE ${whereClause} AND (isLatest=1)
</update>

<select id="reporting-select-islatest-per-table" parameterType="SelectFromWhere" resultType="HashMap">
        SELECT isLatest, count(*)
                FROM ${from}, USER_TAB_COLUMNS
                WHERE UPPER(USER_TAB_COLUMNS.TABLE_NAME) = UPPER(#{from})
                AND UPPER(USER_TAB_COLUMNS.COLUMN_NAME) = UPPER('isLatest')
                GROUP BY isLatest
                ORDER BY isLatest

</select>

<select id="reporting-select-store-protocol-per-table" parameterType="SelectFromWhere" resultType="HashMap">		

	SELECT sys_store_protocol, count(*) 
		FROM ${from}, USER_TAB_COLUMNS
		WHERE UPPER(USER_TAB_COLUMNS.TABLE_NAME) = UPPER(#{from})
		AND UPPER(USER_TAB_COLUMNS.COLUMN_NAME) = UPPER('sys_store_protocol')
		GROUP BY sys_store_protocol 
		ORDER BY sys_store_protocol
</select>


<select id="lastrun-select-status-for-table" parameterType="SelectFromWhere" resultType="String">
	SELECT status
		FROM lastsuccessfulrun
		WHERE table_name like #{from}
</select>


<select id="show-table-count"  parameterType="SelectFromWhere"  resultType="int">
	SELECT count(*) FROM ${from}
</select>


<delete id="dropTable" parameterType="SelectFromWhere"  flushCache="true">
  DROP TABLE ${from}
</delete>

</mapper>