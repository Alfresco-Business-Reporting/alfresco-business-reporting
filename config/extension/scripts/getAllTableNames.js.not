/**
 * Copyright (C) 2011 - 2013 Alfresco Business Reporting project
 *
 * This file is part of the Alfresco Business Reporting project.
 *
 * Licensed under the GNU LGPL, Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.gnu.org/licenses/lgpl.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function getAllTableNames(){
	var harvestDefinition = search.luceneSearch("TYPE:\"reporting:harvestDefinition\"")[0];

	var tables = "";
	tables = concatTableNames(tables, getQueryTables(harvestDefinition));
	tables = concatTableNames(tables, getAuditingExportsTables(harvestDefinition));
	tables = concatTableNames(tables, getUsersAndGroupsTables(harvestDefinition));
	tables = concatTableNames(tables, getCategoriesTables(harvestDefinition));
	logger.log("Total set of tablenames: " + tables);
	return tables;
}


function concatTableNames(tablenames, additionalTables){
	if (additionalTables.length>0){
		if (tablenames.length>0) tablenames+=",";
		tablenames +=additionalTables;
	}
	return tablenames;
}

//------------------------------------------------------------------------

function trim(instring){
	try{
		while (instring.indexOf(" ")==0){
			instring = instring.substring(1,instring.length);
		}
		// TODO and the end too
	} catch (e){
		//nothing
	}
	return instring;
}

//------------------------------------------------------------------------


/** 
 * get the array of queries
 * @param harvestDefinition ScriptNode containing *all* definitions
 * @returns Properties object
 */
function getReportingQueries(harvestDefinition){
	var lines = harvestDefinition.content.split("\n");
	var result=new Object();

	var index; // numeric index of the string array
	var line;  // to be string value of each entry in string array
	for (var index in lines){
		line = lines[index];
		if (!(trim(line).indexOf("#")==0)){
			var keyvalue = line.split("=");
			logger.log("## storing key=" +trim(keyvalue[0])+ " value=" + trim(keyvalue[1]));
			result[trim(keyvalue[0])]=trim(keyvalue[1]);
		} // end if line.startwWith
	} // end for (line in lines)

	return result;
}

//------------------------------------------------------------------------

function getQueryTables(harvestDefinition){
	var queries = getReportingQueries(harvestDefinition);

	// auto create tables that are needed
	var tableNames="";
	var tableName;
	for (tableName in queries){
		if (tableNames.length>0) tableNames += ",";
		tableNames += tableName;
	}
	logger.log("Returning query tables: " + tableNames);
	return tableNames;
}

//------------------------------------------------------------------------

function getAuditingExportsTables(harvestDefinition){
	var tableNames="";

	var auditFeeds=harvestDefinition.properties["reporting:auditingQueries"];
	if (auditFeeds!=null) {
		var tables = auditFeeds.split(",");

		for (var tableName in tables){
			tableName = trim(tableName.toLowerCase());
			if (tableNames.length>0) tableNames += ",";
			tableNames += tableName;
		}

		logger.log("Returning auditing tables: " + tableNames);
		return tableNames;			
	}
}

//------------------------------------------------------------------------

function getUsersAndGroupsTables(harvestDefinition){
	return "person,groups,siteperson";
}

//------------------------------------------------------------------------

function getCategoriesTables(harvestDefinition){
	var categories=harvestDefinition.properties["reporting:categories"];
	var tableNames="";

	for (var c=0;c<categories.length;c++){
		if (tableNames.length>0) tableNames += ",";
		tableNames += categories[c].name;
	}  
	logger.log("Returning categories: "+tableNames);
	return tableNames.toLowerCase();
}
