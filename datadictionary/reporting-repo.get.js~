var method = args["method"];
var table = args["table"];
var details = args["details"];
var noderef = args["noderef"];
//var allTables="calendar,datalistitem,datalist,document,folder,forum,groups,lastsuccessfulrun,link,person,site,sitepersons";

var message = "-1";
var BASEPATH = "sites/swsdp/documentLibrary"

var testHarvesting="harvestingTempQuery";


var testSite = "swdp1";
var reportingRoot = companyhome.childByNamePath("Data Dictionary/Reporting");

var queries = new Object();
queries["folder"]="folder=TYPE:\"cm:folder\" AND NOT TYPE:\"st:site\" AND NOT TYPE:\"dl:dataList\" AND NOT TYPE:\"bpm:package\" AND NOT TYPE:\"cm:systemfolder\" AND NOT TYPE:\"fm:forum\" AND NOT TYPE:\"cm:topic\" AND NOT TYPE:\"trx:transferGroup\""; 
queries["document"]="document=TYPE:\"cm:content\" AND NOT TYPE:\"bpm:task\" AND NOT TYPE:\"dl:dataListItem\" AND NOT TYPE:\"ia:calendarEvent\" AND NOT TYPE:\"lnk:link\" AND NOT TYPE:\"cm:dictionaryModel\" AND NOT ASPECT:\"reporting:executionResult\"";
//                           TYPE:"cm:content" AND NOT TYPE:"bpm:task" AND NOT TYPE:"dl:dataListItem"         AND NOT TYPE:"ia:calendarEvent" AND NOT TYPE:"lnk:link" AND NOT TYPE:"cm:dictionaryModel" AND NOT ASPECT:"reporting:executionResult"
queries["calendar"]="calendar=TYPE:\"ia:calendarEvent\"";
queries["forum"]="forum=TYPE:\"fm:forum\"";
queries["link"]="link=TYPE:\"lnk:link\"";
queries["site"]="ite=TYPE:\"st:site\"";
queries["datalist"]="datalist=TYPE:\"dl:dataList\"";
queries["datalistitem"]="datalistitem=TYPE:\"dl:dataListItem\"";
// topic
logger.log(queries[table]);

function createHarvestDef(query, table, queryTablesEnabled, auditingEnabled,
		categoriesEnabled, userGroupsEnabled, categories, auditingQueries){
  var harvestDef = reportingRoot.createNode(testHarvesting, "reporting:harvestDefinition");
  harvestDef.properties["reporting:queryTablesEnabled"] = queryTablesEnabled;
  harvestDef.properties["reporting:auditingExportsEnabled"] = auditingEnabled;
  harvestDef.properties["reporting:categoriesEnabled"] = categoriesEnabled;
  harvestDef.properties["reporting:usersGroupsEnabled"] = userGroupsEnabled;

  harvestDef.properties["reporting:categories"] = null;
  harvestDef.properties["reporting:auditingQueries"] = null;
  harvestDef.properties["reporting:queryTablesLanguage"] = "Lucene";
  var content = query;
  harvestDef.content = content;
  harvestDef.save();

  return harvestDef;
}

function createHarvestDefAndHarvest(query, table, queryTablesEnabled, auditingEnabled,
		categoriesEnabled, userGroupsEnabled, categories, auditingQueries){

  var harvestDef = createHarvestDef(query, table, queryTablesEnabled, auditingEnabled,
		categoriesEnabled, userGroupsEnabled, categories, auditingQueries);

  var harvest = actions.create("harvesting-executer");
  harvest.execute(harvestDef);
  message = executeSearchAndCount(table);
  harvestDef.remove();
}

function executeSearchAndCount(tablename){
  var table=queries[tablename];
  var query = table.substring(table.indexOf("=")+1, table.length);
  return reporting.countSearchResutls(query);
}

function getInsertFolder(){
  logger.log(BASEPATH);
  return companyhome.childByNamePath(BASEPATH);
}


// ****************************
// method == havest
if ((method.toLowerCase()=="harvest") && (table!=null)){

  if (table.toLowerCase()=="calendar"){
    createHarvestDefAndHarvest(queries["calendar"], "calendar", true, false, false, false, null, null);
  }
  if (table.toLowerCase()=="document"){
    createHarvestDefAndHarvest(queries["document"], "document", true, false, false, false, null, null);
  }
  if (table.toLowerCase()=="folder"){
    createHarvestDefAndHarvest(queries["folder"], "folder", true, false, false, false, null, null);
  }
  if (table.toLowerCase()=="forum"){
    createHarvestDefAndHarvest(queries["forum"], "forum", true, false, false, false, null, null);
  }
  if (table.toLowerCase()=="site"){
    createHarvestDefAndHarvest(queries["site"], "site", true, false, false, false, null, null);
  }
  if (table.toLowerCase()=="datalist"){
    createHarvestDefAndHarvest(queries["datalist"], "datalist", true, false, false, false, null, null);
  }
  if (table.toLowerCase()=="datalistitem"){
    createHarvestDefAndHarvest(queries["datalistitem"], "datalistitem", true, false, false, false, null, null);
  }


  message = executeSearchAndCount(table);
}

// ********************v********
// method == count
if ((method.toLowerCase()=="count") && (table!=null)){

  if (table.toLowerCase()=="calendar"){
    message = executeSearchAndCount("calendar");
  }
  if (table.toLowerCase()=="document"){
    message = executeSearchAndCount("document");
  }
  if (table.toLowerCase()=="folder"){
    message = executeSearchAndCount("folder");
  }
  if (table.toLowerCase()=="forum"){
    message = executeSearchAndCount("forum");
  }
  if (table.toLowerCase()=="site"){
    message = executeSearchAndCount("site");
  }
  if (table.toLowerCase()=="datalist"){
    message = executeSearchAndCount("datalistitem");
  }
// TODO Groups, Persons, SitePersons

}

function addTag(){
      var thingy = search.findNode(noderef);
      thingy.addTag("huh");
      thingy.save();
}

function updateName(){
  var thingy = search.findNode(noderef);
  thingy.properties["cm:name"] = "New name " + (new Date()).getTime() + ".txt";
  thingy.save();
}

function updateTitle(){

  var thingy = search.findNode(noderef);
logger.log("NAME " + thingy.name);
  thingy.properties["cm:title"] = "New title";
  thingy.save();
}

function updateDescription(){

  var thingy = search.findNode(noderef);
  thingy.properties["cm:description"] = "New description";
  thingy.save();
}

if (method.toLowerCase()=="update"){

  if (table.toLowerCase()=="document"){

    if (details.toLowerCase()=="create"){
      var parentFolder = getInsertFolder();
      var filename = (new Date()).getTime() + ".txt";
      var type = "cm:content";
      var props = new Array();
      props["cm:title"]="This is the document title";
      props["cm:description"]="This is the document description " + filename;
      var thisNode = parentFolder.createNode(filename, type, props);
      thisNode.content = "This is the content " + filename;
      thisNode.addAspect("cm:versionable");
      noderef = thisNode.nodeRef.toString();
    }

    //TODO
    if (details.toLowerCase()=="addtag"){
      addTag();
    }

    if (details.toLowerCase()=="updatename") {
      updateName();
    }

    if (details.toLowerCase()=="updatetitle") {
      updateTitle();
    }

    if (details.toLowerCase()=="updatedescription") {
      updateDescription();
    }

  } // end document

  // #################### Folder ################### 
  if (table.toLowerCase()=="folder") {

    if (details.toLowerCase()=="create"){
      var parentFolder = getInsertFolder();
      var filename = (new Date()).getTime();
      var type = "cm:folder";
      var props = new Array();
      props["cm:title"]="This is the folder title";
      props["cm:description"]="This is the folder description " + filename;
      var thisNode = parentFolder.createNode(filename, type, props);
      noderef = thisNode.nodeRef.toString();
    }
  } // end folder
// TODO
// update name
// update title
// update description

// add tag
// add versionable
// add exif

// delete node
} // end method=update

if (method.toLowerCase()=="delete"){
  var thingy = search.findNode(noderef);
  thingy.remove();
}

model.vendor = reporting.getDatabaseVendor();
model.table=table;
model.method=method;
model.details=details;
model.noderef=noderef;
model.response=message;
